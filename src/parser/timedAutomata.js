/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var timedAutomata = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 15],
    $V1 = [1, 16],
    $V2 = [1, 17],
    $V3 = [1, 18],
    $V4 = [1, 19],
    $V5 = [1, 20],
    $V6 = [1, 21],
    $V7 = [5, 20, 21, 22, 24, 25, 26, 27],
    $V8 = [1, 40],
    $V9 = [1, 41],
    $Va = [20, 21, 22, 24, 25, 26, 27],
    $Vb = [1, 43],
    $Vc = [5, 17, 20, 21, 22, 24, 25, 26, 27, 32],
    $Vd = [1, 57],
    $Ve = [1, 58],
    $Vf = [1, 59],
    $Vg = [1, 60],
    $Vh = [1, 61],
    $Vi = [1, 62],
    $Vj = [1, 63],
    $Vk = [1, 64],
    $Vl = [17, 34],
    $Vm = [1, 97],
    $Vn = [1, 96],
    $Vo = [1, 92],
    $Vp = [1, 103],
    $Vq = [17, 34, 47],
    $Vr = [1, 108],
    $Vs = [17, 34, 49],
    $Vt = [2, 49],
    $Vu = [1, 114],
    $Vv = [1, 118],
    $Vw = [1, 119],
    $Vx = [1, 120],
    $Vy = [1, 121],
    $Vz = [1, 122],
    $VA = [1, 123],
    $VB = [1, 113],
    $VC = [1, 115],
    $VD = [1, 116],
    $VE = [1, 117],
    $VF = [17, 34, 49, 51],
    $VG = [17, 34, 49, 51, 58, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],
    $VH = [17, 34, 49, 51, 58, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],
    $VI = [2, 63],
    $VJ = [1, 127],
    $VK = [17, 34, 63],
    $VL = [1, 138],
    $VM = [1, 139],
    $VN = [18, 23, 50],
    $VO = [1, 146],
    $VP = [1, 150],
    $VQ = [1, 151],
    $VR = [2, 66],
    $VS = [17, 34, 49, 51, 66, 67, 68, 69, 70, 71],
    $VT = [2, 64];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      file: 3,
      taSystem: 4,
      TOK_EOF: 5,
      systemDef: 6,
      items: 7,
      item: 8,
      processDef: 9,
      eventDef: 10,
      clockDef: 11,
      intDef: 12,
      locationDef: 13,
      edgeDef: 14,
      syncDef: 15,
      TOK_SYSTEM: 16,
      TOK_COLON: 17,
      TOK_ID: 18,
      attributeList: 19,
      TOK_PROCESS: 20,
      TOK_EVENT: 21,
      TOK_CLOCK: 22,
      TOK_INTEGER: 23,
      TOK_INT: 24,
      TOK_LOCATION: 25,
      TOK_EDGE: 26,
      TOK_SYNC: 27,
      syncConstraints: 28,
      syncConstraint: 29,
      TOK_AT: 30,
      TOK_QMARK: 31,
      TOK_LBRACE: 32,
      attributes: 33,
      TOK_RBRACE: 34,
      attribute: 35,
      TOK_INIT: 36,
      TOK_LABELS: 37,
      labelsList: 38,
      TOK_INVAR: 39,
      constraints: 40,
      TOK_COMMIT: 41,
      TOK_URGENT: 42,
      TOK_PROV: 43,
      TOK_DO: 44,
      statements: 45,
      TOK_LAYOUT: 46,
      TOK_COMMA: 47,
      constraint: 48,
      TOK_AND: 49,
      TOK_LPARENTHESES: 50,
      TOK_RPARENTHESES: 51,
      int_term: 52,
      predicate_constraint: 53,
      clock_constraint: 54,
      clock_term: 55,
      cmp: 56,
      clock_value: 57,
      TOK_MINUS: 58,
      TOK_LBRACKET: 59,
      TOK_RBRACKET: 60,
      maths: 61,
      statement: 62,
      TOK_SEMICOLON: 63,
      TOK_SET: 64,
      doFormula: 65,
      TOK_EQ: 66,
      TOK_LT: 67,
      TOK_LEQ: 68,
      TOK_GEQ: 69,
      TOK_GT: 70,
      TOK_NEQ: 71,
      TOK_PLUS: 72,
      TOK_MUL: 73,
      TOK_DIV: 74,
      TOK_PERCENT: 75,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      2: 'error',
      5: 'TOK_EOF',
      16: 'TOK_SYSTEM',
      17: 'TOK_COLON',
      18: 'TOK_ID',
      20: 'TOK_PROCESS',
      21: 'TOK_EVENT',
      22: 'TOK_CLOCK',
      23: 'TOK_INTEGER',
      24: 'TOK_INT',
      25: 'TOK_LOCATION',
      26: 'TOK_EDGE',
      27: 'TOK_SYNC',
      30: 'TOK_AT',
      31: 'TOK_QMARK',
      32: 'TOK_LBRACE',
      34: 'TOK_RBRACE',
      36: 'TOK_INIT',
      37: 'TOK_LABELS',
      39: 'TOK_INVAR',
      41: 'TOK_COMMIT',
      42: 'TOK_URGENT',
      43: 'TOK_PROV',
      44: 'TOK_DO',
      46: 'TOK_LAYOUT',
      47: 'TOK_COMMA',
      49: 'TOK_AND',
      50: 'TOK_LPARENTHESES',
      51: 'TOK_RPARENTHESES',
      58: 'TOK_MINUS',
      59: 'TOK_LBRACKET',
      60: 'TOK_RBRACKET',
      63: 'TOK_SEMICOLON',
      64: 'TOK_SET',
      66: 'TOK_EQ',
      67: 'TOK_LT',
      68: 'TOK_LEQ',
      69: 'TOK_GEQ',
      70: 'TOK_GT',
      71: 'TOK_NEQ',
      72: 'TOK_PLUS',
      73: 'TOK_MUL',
      74: 'TOK_DIV',
      75: 'TOK_PERCENT',
    },
    productions_: [
      0,
      [3, 2],
      [4, 2],
      [7, 2],
      [7, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [8, 1],
      [6, 4],
      [6, 3],
      [9, 4],
      [9, 3],
      [10, 4],
      [10, 3],
      [11, 6],
      [11, 5],
      [12, 12],
      [12, 11],
      [13, 6],
      [13, 5],
      [14, 10],
      [14, 9],
      [15, 4],
      [15, 3],
      [28, 1],
      [28, 3],
      [29, 3],
      [29, 4],
      [19, 3],
      [19, 2],
      [33, 1],
      [33, 3],
      [35, 2],
      [35, 3],
      [35, 3],
      [35, 2],
      [35, 2],
      [35, 3],
      [35, 3],
      [35, 5],
      [38, 1],
      [38, 3],
      [40, 1],
      [40, 3],
      [48, 3],
      [48, 1],
      [48, 1],
      [48, 1],
      [54, 3],
      [54, 3],
      [54, 3],
      [54, 5],
      [55, 1],
      [55, 3],
      [57, 1],
      [57, 4],
      [53, 3],
      [53, 5],
      [52, 1],
      [52, 1],
      [52, 4],
      [52, 5],
      [52, 3],
      [45, 1],
      [45, 3],
      [62, 3],
      [65, 1],
      [65, 1],
      [65, 3],
      [65, 3],
      [56, 1],
      [56, 1],
      [56, 1],
      [56, 1],
      [56, 1],
      [56, 1],
      [61, 1],
      [61, 1],
      [61, 1],
      [61, 1],
      [61, 1],
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
          return $$[$0 - 1];
          break;
        case 2:
          this.$ = { system: $$[$0 - 1], items: $$[$0] };
          break;
        case 3:
          $$[$0 - 1].push($$[$0]);
          this.$ = $$[$0 - 1];
          break;
        case 4:
        case 28:
          this.$ = [$$[$0]];
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 70:
        case 71:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
          this.$ = $$[$0];
          break;
        case 12:
        case 14:
        case 16:
          this.$ = { type: $$[$0 - 3], name: $$[$0 - 1], attributes: $$[$0] };
          break;
        case 13:
        case 15:
        case 17:
          this.$ = { type: $$[$0 - 2], name: $$[$0] };
          break;
        case 18:
          this.$ = { type: $$[$0 - 5], amount: $$[$0 - 3], name: $$[$0 - 1], attributes: $$[$0] };
          break;
        case 19:
          this.$ = { type: $$[$0 - 4], amount: $$[$0 - 2], name: $$[$0] };
          break;
        case 20:
          this.$ = {
            type: $$[$0 - 11],
            size: $$[$0 - 9],
            min: $$[$0 - 7],
            max: $$[$0 - 5],
            init: $$[$0 - 3],
            name: $$[$0 - 1],
            attributes: $$[$0],
          };
          break;
        case 21:
          this.$ = {
            type: $$[$0 - 10],
            size: $$[$0 - 8],
            min: $$[$0 - 6],
            max: $$[$0 - 4],
            init: $$[$0 - 2],
            name: $$[$0],
          };
          break;
        case 22:
          this.$ = { type: $$[$0 - 5], processName: $$[$0 - 3], name: $$[$0 - 1], attributes: $$[$0] };
          break;
        case 23:
          this.$ = { type: $$[$0 - 4], processName: $$[$0 - 2], name: $$[$0] };
          break;
        case 24:
          this.$ = {
            type: $$[$0 - 9],
            processName: $$[$0 - 7],
            source: $$[$0 - 5],
            target: $$[$0 - 3],
            event: $$[$0 - 1],
            attributes: $$[$0],
          };
          break;
        case 25:
          this.$ = { type: $$[$0 - 8], processName: $$[$0 - 6], source: $$[$0 - 4], target: $$[$0 - 2], event: $$[$0] };
          break;
        case 26:
          this.$ = { type: $$[$0 - 3], syncConstr: $$[$0 - 1], attributes: $$[$0] };
          break;
        case 27:
          this.$ = { type: $$[$0 - 2], syncConstr: $$[$0] };
          break;
        case 29:
        case 35:
        case 45:
        case 47:
        case 68:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];
          break;
        case 30:
          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
        case 31:
          this.$ = $$[$0 - 3] + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
        case 32:
          this.$ = $$[$0 - 1];
          break;
        case 33:
          this.$ = [];
          break;
        case 34:
        case 44:
        case 46:
        case 67:
          this.$ = [$$[$0]];
          break;
        case 36:
          this.$ = { initial: $$[$0 - 1] };
          break;
        case 37:
          this.$ = { labels: $$[$0 - 2], labelList: $$[$0] };
          break;
        case 38:
          this.$ = { invariant: $$[$0 - 2], constraint: $$[$0] };
          break;
        case 39:
          this.$ = { commit: $$[$0 - 1] };
          break;
        case 40:
          this.$ = { urgent: $$[$0 - 1] };
          break;
        case 41:
          this.$ = { provided: $$[$0 - 2], constraint: $$[$0] };
          break;
        case 42:
          this.$ = { do: $$[$0 - 2], maths: $$[$0] };
          break;
        case 43:
          this.$ = { layout: $$[$0 - 4], x: $$[$0 - 2], y: $$[$0] };
          break;
        case 48:
          this.$ = $$[$0 - 2];
          break;
        case 49:
          this.$ = { intConstraint: $$[$0] };
          break;
        case 50:
          this.$ = { predicateConstraint: $$[$0] };
          break;
        case 51:
          this.$ = { clockConstraint: $$[$0] };
          break;
        case 52:
          this.$ = { clockTerm: $$[$0 - 2], comparator: $$[$0 - 1], intTerm: $$[$0] };
          break;
        case 53:
          this.$ = { intTerm: $$[$0 - 2], comparator: $$[$0 - 1], clockTerm: $$[$0] };
          break;
        case 54:
          this.$ = { clockValueL: $$[$0 - 2], comparator: $$[$0 - 1], clockValueR: $$[$0] };
          break;
        case 55:
          this.$ = {
            intTermL: $$[$0 - 4],
            comparatorL: $$[$0 - 3],
            clock_term: $$[$0 - 2],
            comparatorR: $$[$0 - 1],
            intTermR: $$[$0],
          };
          break;
        case 56:
          this.$ = { clockValue: $$[$0] };
          break;
        case 57:
          this.$ = { clockValueL: $$[$0 - 2], minus: $$[$0 - 1], clockValueR: $$[$0] };
          break;
        case 58:
          this.$ = { clock: $$[$0] };
          break;
        case 59:
          this.$ = { clock: $$[$0 - 3], intTerm: $$[$0 - 1] };
          break;
        case 60:
          this.$ = { intTermL: $$[$0 - 2], comparator: $$[$0 - 1], intTermR: $$[$0] };
          break;
        case 61:
          this.$ = {
            intTermL: $$[$0 - 4],
            comparatorL: $$[$0 - 3],
            intTermM: $$[$0 - 2],
            comparatorR: $$[$0 - 1],
            intTermR: $$[$0],
          };
          break;
        case 62:
          this.$ = { value: $$[$0] };
          break;
        case 63:
          this.$ = { int: $$[$0] };
          break;
        case 64:
          this.$ = { int: $$[$0 - 3], insideBrackets: $$[$0 - 1] };
          break;
        case 65:
          this.$ = { intTermL: $$[$0 - 4], maths: $$[$0 - 3], intTermR: $$[$0 - 2] };
          break;
        case 66:
          this.$ = { intTermL: $$[$0 - 2], maths: $$[$0 - 1], intTermR: $$[$0] };
          break;
        case 69:
          this.$ = { lhs: $$[$0 - 2], set: $$[$0 - 1], rhs: $$[$0] };
          break;
        case 72:
        case 73:
          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
      }
    },
    table: [
      { 3: 1, 4: 2, 6: 3, 16: [1, 4] },
      { 1: [3] },
      { 5: [1, 5] },
      {
        7: 6,
        8: 7,
        9: 8,
        10: 9,
        11: 10,
        12: 11,
        13: 12,
        14: 13,
        15: 14,
        20: $V0,
        21: $V1,
        22: $V2,
        24: $V3,
        25: $V4,
        26: $V5,
        27: $V6,
      },
      { 17: [1, 22] },
      { 1: [2, 1] },
      {
        5: [2, 2],
        8: 23,
        9: 8,
        10: 9,
        11: 10,
        12: 11,
        13: 12,
        14: 13,
        15: 14,
        20: $V0,
        21: $V1,
        22: $V2,
        24: $V3,
        25: $V4,
        26: $V5,
        27: $V6,
      },
      o($V7, [2, 4]),
      o($V7, [2, 5]),
      o($V7, [2, 6]),
      o($V7, [2, 7]),
      o($V7, [2, 8]),
      o($V7, [2, 9]),
      o($V7, [2, 10]),
      o($V7, [2, 11]),
      { 17: [1, 24] },
      { 17: [1, 25] },
      { 17: [1, 26] },
      { 17: [1, 27] },
      { 17: [1, 28] },
      { 17: [1, 29] },
      { 17: [1, 30] },
      { 18: [1, 31] },
      o($V7, [2, 3]),
      { 18: [1, 32] },
      { 18: [1, 33] },
      { 23: [1, 34] },
      { 23: [1, 35] },
      { 18: [1, 36] },
      { 18: [1, 37] },
      { 18: $V8, 20: $V9, 28: 38, 29: 39 },
      o($Va, [2, 13], { 19: 42, 32: $Vb }),
      o($V7, [2, 15], { 19: 44, 32: $Vb }),
      o($V7, [2, 17], { 19: 45, 32: $Vb }),
      { 17: [1, 46] },
      { 17: [1, 47] },
      { 17: [1, 48] },
      { 17: [1, 49] },
      o($V7, [2, 27], { 19: 50, 17: [1, 51], 32: $Vb }),
      o($Vc, [2, 28]),
      { 30: [1, 52] },
      { 30: [1, 53] },
      o($Va, [2, 12]),
      { 33: 54, 34: [1, 55], 35: 56, 36: $Vd, 37: $Ve, 39: $Vf, 41: $Vg, 42: $Vh, 43: $Vi, 44: $Vj, 46: $Vk },
      o($V7, [2, 14]),
      o($V7, [2, 16]),
      { 18: [1, 65] },
      { 23: [1, 66] },
      { 18: [1, 67] },
      { 18: [1, 68] },
      o($V7, [2, 26]),
      { 18: $V8, 20: $V9, 29: 69 },
      { 18: [1, 70] },
      { 18: [1, 71] },
      { 17: [1, 73], 34: [1, 72] },
      o($V7, [2, 33]),
      o($Vl, [2, 34]),
      { 17: [1, 74] },
      { 17: [1, 75] },
      { 17: [1, 76] },
      { 17: [1, 77] },
      { 17: [1, 78] },
      { 17: [1, 79] },
      { 17: [1, 80] },
      { 17: [1, 81] },
      o($V7, [2, 19], { 19: 82, 32: $Vb }),
      { 17: [1, 83] },
      o($V7, [2, 23], { 19: 84, 32: $Vb }),
      { 17: [1, 85] },
      o($Vc, [2, 29]),
      o($Vc, [2, 30]),
      { 31: [1, 86] },
      o($V7, [2, 32]),
      { 35: 87, 36: $Vd, 37: $Ve, 39: $Vf, 41: $Vg, 42: $Vh, 43: $Vi, 44: $Vj, 46: $Vk },
      o($Vl, [2, 36]),
      { 18: [1, 89], 38: 88 },
      { 18: $Vm, 23: $Vn, 40: 90, 48: 91, 50: $Vo, 52: 93, 53: 94, 54: 95, 55: 98, 57: 99 },
      o($Vl, [2, 39]),
      o($Vl, [2, 40]),
      { 18: $Vm, 23: $Vn, 40: 100, 48: 91, 50: $Vo, 52: 93, 53: 94, 54: 95, 55: 98, 57: 99 },
      { 18: $Vp, 45: 101, 62: 102 },
      { 23: [1, 104] },
      o($V7, [2, 18]),
      { 23: [1, 105] },
      o($V7, [2, 22]),
      { 18: [1, 106] },
      o($Vc, [2, 31]),
      o($Vl, [2, 35]),
      o($Vl, [2, 37], { 47: [1, 107] }),
      o($Vq, [2, 44]),
      o($Vl, [2, 38], { 49: $Vr }),
      o($Vs, [2, 46]),
      { 18: $Vm, 23: $Vn, 48: 109, 50: $Vo, 52: 110, 53: 94, 54: 95, 55: 98, 57: 99 },
      o($Vs, $Vt, {
        61: 111,
        56: 112,
        58: $Vu,
        66: $Vv,
        67: $Vw,
        68: $Vx,
        69: $Vy,
        70: $Vz,
        71: $VA,
        72: $VB,
        73: $VC,
        74: $VD,
        75: $VE,
      }),
      o($VF, [2, 50]),
      o($VF, [2, 51]),
      o($VG, [2, 62]),
      o($VH, $VI, { 59: [1, 124] }),
      { 56: 125, 66: $Vv, 67: $Vw, 68: $Vx, 69: $Vy, 70: $Vz, 71: $VA },
      { 56: 126, 58: $VJ, 66: $Vv, 67: $Vw, 68: $Vx, 69: $Vy, 70: $Vz, 71: $VA },
      o($Vl, [2, 41], { 49: $Vr }),
      o($Vl, [2, 42], { 63: [1, 128] }),
      o($VK, [2, 67]),
      { 64: [1, 129] },
      { 47: [1, 130] },
      { 17: [1, 131] },
      { 17: [1, 132] },
      { 18: [1, 133] },
      { 18: $Vm, 23: $Vn, 48: 134, 50: $Vo, 52: 93, 53: 94, 54: 95, 55: 98, 57: 99 },
      { 51: [1, 135] },
      {
        51: $Vt,
        56: 112,
        58: $Vu,
        61: 136,
        66: $Vv,
        67: $Vw,
        68: $Vx,
        69: $Vy,
        70: $Vz,
        71: $VA,
        72: $VB,
        73: $VC,
        74: $VD,
        75: $VE,
      },
      { 18: $VL, 23: $Vn, 50: $VM, 52: 137 },
      { 18: $Vm, 23: $Vn, 50: $VM, 52: 140, 55: 141, 57: 142 },
      o($VN, [2, 80]),
      o($VN, [2, 81]),
      o($VN, [2, 82]),
      o($VN, [2, 83]),
      o($VN, [2, 84]),
      o($VN, [2, 74]),
      o($VN, [2, 75]),
      o($VN, [2, 76]),
      o($VN, [2, 77]),
      o($VN, [2, 78]),
      o($VN, [2, 79]),
      { 18: $VL, 23: $Vn, 50: $VM, 52: 143 },
      { 18: $VL, 23: $Vn, 50: $VM, 52: 144 },
      { 18: $VO, 57: 145 },
      { 18: $VO, 57: 147 },
      { 18: $Vp, 62: 148 },
      { 18: $VP, 23: $VQ, 65: 149 },
      { 23: [1, 152] },
      { 23: [1, 153] },
      { 18: [1, 154] },
      o($Vq, [2, 45]),
      o($Vs, [2, 47]),
      o($VF, [2, 48]),
      { 18: $VL, 23: $Vn, 50: $VM, 52: 155 },
      o([17, 34, 49, 51, 60, 66, 67, 68, 69, 70, 71], $VR, { 61: 111, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      o($VG, $VI, { 59: [1, 156] }),
      { 18: $VL, 23: $Vn, 50: $VM, 52: 157 },
      o($VF, [2, 60], {
        61: 111,
        56: 158,
        58: $Vu,
        66: $Vv,
        67: $Vw,
        68: $Vx,
        69: $Vy,
        70: $Vz,
        71: $VA,
        72: $VB,
        73: $VC,
        74: $VD,
        75: $VE,
      }),
      o($VF, [2, 53], { 56: 159, 66: $Vv, 67: $Vw, 68: $Vx, 69: $Vy, 70: $Vz, 71: $VA }),
      o($VS, [2, 56], { 58: $VJ }),
      { 58: $Vu, 60: [1, 160], 61: 111, 72: $VB, 73: $VC, 74: $VD, 75: $VE },
      o($VF, [2, 52], { 61: 111, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      o($VF, [2, 54]),
      o($VS, [2, 58], { 59: [1, 161] }),
      o($VS, [2, 57]),
      o($VK, [2, 68]),
      o($VK, [2, 69]),
      o($VK, [2, 70], { 61: 162, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      o($VK, [2, 71], { 61: 163, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      o($Vl, [2, 43]),
      { 17: [1, 164] },
      o($V7, [2, 25], { 19: 165, 32: $Vb }),
      o([66, 67, 68, 69, 70, 71], $VR, { 61: 111, 51: [1, 166], 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      { 18: $VL, 23: $Vn, 50: $VM, 52: 167 },
      { 58: $Vu, 61: 136, 72: $VB, 73: $VC, 74: $VD, 75: $VE },
      { 18: $VL, 23: $Vn, 50: $VM, 52: 168 },
      { 18: $VL, 23: $Vn, 50: $VM, 52: 169 },
      o($VH, $VT),
      { 18: $VL, 23: $Vn, 50: $VM, 52: 170 },
      { 18: $VP, 23: $VQ, 65: 171 },
      { 18: $VP, 23: $VQ, 65: 172 },
      { 18: [1, 173] },
      o($V7, [2, 24]),
      o($VG, [2, 65]),
      { 58: $Vu, 60: [1, 174], 61: 111, 72: $VB, 73: $VC, 74: $VD, 75: $VE },
      o($VF, [2, 61], { 61: 111, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      o($VF, [2, 55], { 61: 111, 58: $Vu, 72: $VB, 73: $VC, 74: $VD, 75: $VE }),
      { 58: $Vu, 60: [1, 175], 61: 111, 72: $VB, 73: $VC, 74: $VD, 75: $VE },
      o($VK, [2, 72]),
      o($VK, [2, 73]),
      o($V7, [2, 21], { 19: 176, 32: $Vb }),
      o($VG, $VT),
      o($VS, [2, 59]),
      o($V7, [2, 20]),
    ],
    defaultActions: { 5: [2, 1] },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      _token_stack: var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ':\n' +
              lexer.showPosition() +
              '\nExpecting ' +
              expected.join(', ') +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ': Unexpected ' +
              (symbol == EOF ? 'end of input' : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected,
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.apply(
              yyval,
              [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args)
            );
            if (typeof r !== 'undefined') {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    },
  };
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            'Lexical error on line ' +
              (this.yylineno + 1) +
              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
              this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno,
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, '');
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, '');
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput() + '\n' + c + '^';
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === '') {
          return this.EOF;
        } else {
          return this.parseError(
            'Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno,
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions['INITIAL'].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return 'INITIAL';
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: { 'case-sensitive': true },
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0 /* skip whitespace */:
            break;
          case 1 /* skip comments */:
            break;
          case 2:
            return 'TOK_EOL';
            break;
          case 3:
            return 22;
            break;
          case 4:
            return 26;
            break;
          case 5:
            return 21;
            break;
          case 6:
            return 24;
            break;
          case 7:
            return 25;
            break;
          case 8:
            return 20;
            break;
          case 9:
            return 27;
            break;
          case 10:
            return 16;
            break;
          case 11:
            return 36;
            break;
          case 12:
            return 37;
            break;
          case 13:
            return 39;
            break;
          case 14:
            return 41;
            break;
          case 15:
            return 42;
            break;
          case 16:
            return 43;
            break;
          case 17:
            return 44;
            break;
          case 18:
            return 'TOK_IF';
            break;
          case 19:
            return 'TOK_WHILE';
            break;
          case 20:
            return 'TOK_NOP';
            break;
          case 21:
            return 'TOK_LOCAL';
            break;
          case 22:
            return 46;
            break;
          case 23:
            return 23;
            break;
          case 24:
            return 18;
            break;
          case 25:
            return 17;
            break;
          case 26:
            return 30;
            break;
          case 27:
            return 32;
            break;
          case 28:
            return 34;
            break;
          case 29:
            return 47;
            break;
          case 30:
            return 49;
            break;
          case 31:
            return 72;
            break;
          case 32:
            return 58;
            break;
          case 33:
            return 73;
            break;
          case 34:
            return 74;
            break;
          case 35:
            return 75;
            break;
          case 36:
            return 66;
            break;
          case 37:
            return 71;
            break;
          case 38:
            return 68;
            break;
          case 39:
            return 69;
            break;
          case 40:
            return 67;
            break;
          case 41:
            return 70;
            break;
          case 42:
            return 64;
            break;
          case 43:
            return 59;
            break;
          case 44:
            return 60;
            break;
          case 45:
            return 50;
            break;
          case 46:
            return 51;
            break;
          case 47:
            return 'TOK_EXMARK';
            break;
          case 48:
            return 31;
            break;
          case 49:
            return 63;
            break;
          case 50:
            return 5;
            break;
        }
      },
      rules: [
        /^(?:\s+)/,
        /^(?:#[^\n]*)/,
        /^(?:\n)/,
        /^(?:clock\b)/,
        /^(?:edge\b)/,
        /^(?:event\b)/,
        /^(?:int\b)/,
        /^(?:location\b)/,
        /^(?:process\b)/,
        /^(?:sync\b)/,
        /^(?:system\b)/,
        /^(?:initial\b)/,
        /^(?:labels\b)/,
        /^(?:invariant\b)/,
        /^(?:committed\b)/,
        /^(?:urgent\b)/,
        /^(?:provided\b)/,
        /^(?:do\b)/,
        /^(?:if\b)/,
        /^(?:while\b)/,
        /^(?:nop\b)/,
        /^(?:local\b)/,
        /^(?:layout\b)/,
        /^(?:[0-9]+)/,
        /^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,
        /^(?::)/,
        /^(?:@)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:,)/,
        /^(?:&&)/,
        /^(?:\+)/,
        /^(?:-)/,
        /^(?:\*)/,
        /^(?:\/)/,
        /^(?:%)/,
        /^(?:==)/,
        /^(?:!=)/,
        /^(?:<=)/,
        /^(?:>=)/,
        /^(?:<)/,
        /^(?:>)/,
        /^(?:=)/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:!)/,
        /^(?:\?)/,
        /^(?:;)/,
        /^(?:$)/,
      ],
      conditions: {
        INITIAL: {
          rules: [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
            29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
          ],
          inclusive: true,
        },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = timedAutomata;
  exports.Parser = timedAutomata.Parser;
  exports.parse = function () {
    return timedAutomata.parse.apply(timedAutomata, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), 'utf8');
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}

export default timedAutomata;
