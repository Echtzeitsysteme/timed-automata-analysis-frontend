/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var timedAutomata_alt = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[5,20,21,22,24,25,26,27],$V8=[20,21,22,24,25,26,27],$V9=[1,43],$Va=[1,57],$Vb=[1,58],$Vc=[1,59],$Vd=[1,60],$Ve=[1,61],$Vf=[1,62],$Vg=[1,63],$Vh=[17,36],$Vi=[1,87],$Vj=[1,90],$Vk=[1,92],$Vl=[1,95],$Vm=[1,101],$Vn=[1,102],$Vo=[1,103],$Vp=[1,104],$Vq=[1,105],$Vr=[1,106],$Vs=[17,36,50,56,57,58,59,60,61],$Vt=[18,23],$Vu=[17,36,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"file":3,"taSystem":4,"TOK_EOF":5,"systemDef":6,"items":7,"item":8,"processDef":9,"eventDef":10,"clockDef":11,"intDef":12,"locationDef":13,"edgeDef":14,"syncDef":15,"TOK_SYSTEM":16,"TOK_COLON":17,"TOK_ID":18,"attributeList":19,"TOK_PROCESS":20,"TOK_EVENT":21,"TOK_CLOCK":22,"TOK_INTEGER":23,"TOK_INT":24,"TOK_LOCATION":25,"TOK_EDGE":26,"TOK_SYNC":27,"syncConstraints":28,"syncConstraint":29,"syncConstraint1":30,"syncConstraints1":31,"TOK_AT":32,"TOK_QMARK":33,"TOK_LBRACE":34,"attributes":35,"TOK_RBRACE":36,"attribute":37,"TOK_INIT":38,"TOK_LABELS":39,"labelsList":40,"TOK_INVAR":41,"constraints":42,"TOK_COMMIT":43,"TOK_URGENT":44,"TOK_PROV":45,"TOK_DO":46,"doSomething":47,"TOK_COMMA":48,"constraint":49,"TOK_AND":50,"cmp":51,"formula":52,"maths":53,"TOK_SET":54,"TOK_SEMICOLON":55,"TOK_EQ":56,"TOK_LT":57,"TOK_LEQ":58,"TOK_GEQ":59,"TOK_GT":60,"TOK_NEQ":61,"TOK_PLUS":62,"TOK_MINUS":63,"TOK_MUL":64,"TOK_DIV":65,"TOK_PERCENT":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"TOK_EOF",16:"TOK_SYSTEM",17:"TOK_COLON",18:"TOK_ID",20:"TOK_PROCESS",21:"TOK_EVENT",22:"TOK_CLOCK",23:"TOK_INTEGER",24:"TOK_INT",25:"TOK_LOCATION",26:"TOK_EDGE",27:"TOK_SYNC",30:"syncConstraint1",32:"TOK_AT",33:"TOK_QMARK",34:"TOK_LBRACE",36:"TOK_RBRACE",38:"TOK_INIT",39:"TOK_LABELS",41:"TOK_INVAR",43:"TOK_COMMIT",44:"TOK_URGENT",45:"TOK_PROV",46:"TOK_DO",48:"TOK_COMMA",50:"TOK_AND",54:"TOK_SET",55:"TOK_SEMICOLON",56:"TOK_EQ",57:"TOK_LT",58:"TOK_LEQ",59:"TOK_GEQ",60:"TOK_GT",61:"TOK_NEQ",62:"TOK_PLUS",63:"TOK_MINUS",64:"TOK_MUL",65:"TOK_DIV",66:"TOK_PERCENT"},
productions_: [0,[3,2],[4,2],[7,1],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[6,4],[6,3],[9,4],[9,3],[10,4],[10,3],[11,6],[11,5],[12,12],[12,11],[13,6],[13,5],[14,10],[14,9],[15,4],[15,3],[28,3],[31,1],[31,3],[29,3],[29,4],[19,3],[19,2],[35,1],[35,3],[37,2],[37,3],[37,3],[37,2],[37,2],[37,3],[37,3],[40,1],[40,3],[42,1],[42,3],[49,3],[49,5],[52,1],[52,3],[47,3],[47,5],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[53,1],[53,1],[53,1],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 4:
this.$ = {$$[$0-1], $$[$0]};
break;
case 3: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 35: case 44: case 46: case 50: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64:
this.$ = $$[$0];
break;
case 12: case 14: case 16:
 this.$ = {type: $$[$0-3], name: $$[$0-1], attr: $$[$0]};
break;
case 13: case 15: case 17:
 this.$ = {type: $$[$0-2], name: $$[$0]};
break;
case 18:
 this.$ = {type: $$[$0-5], amount: Number($$[$0-3]), name: $$[$0-1], attr: $$[$0]};
break;
case 19:
 this.$ = {type: $$[$0-4], amount: $$[$0-2], name: $$[$0]};
break;
case 20:
 this.$ = {type: $$[$0-11], size: Number($$[$0-9]), min: Number($$[$0-7]), max: Number($$[$0-5]), init: Number($$[$0-3]), name: $$[$0-1], attr: $$[$0]};
break;
case 21:
 this.$ = {type: $$[$0-10], size: $$[$0-8], min: $$[$0-6], max: $$[$0-4], init: $$[$0-2], init: $$[$0]};
break;
case 22:
 this.$ = { type: $$[$0-5], processName: $$[$0-3], name: $$[$0-1], attr: $$[$0]};
break;
case 23:
 this.$ = { type: $$[$0-4], processName: $$[$0-2], name: $$[$0]};
break;
case 24:
 this.$ = { type: $$[$0-9], processName: $$[$0-7], source: $$[$0-5], target: $$[$0-3], event: $$[$0-1], attr: $$[$0]};
break;
case 25:
 this.$ = { type: $$[$0-8], processName: $$[$0-6], source: $$[$0-4], target: $$[$0-2], event: $$[$0]};
break;
case 26:
 this.$ = { type: $$[$0-3], syncConstr: $$[$0-1], attr: $$[$0]};
break;
case 27:
 this.$ = { type: $$[$0-2], syncConstr: $$[$0]};
break;
case 28: case 30:
 this.$ = $$[$0-2] + $$[$0];
break;
case 29:
 this.$ = $$[$0];
break;
case 31:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 32:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 33: case 37: case 40: case 41:
this.$ = $$[$0-1];
break;
case 36: case 38: case 39: case 42: case 43: case 45: case 47:
this.$ = $$[$0-2] + $$[$0];
break;
case 48: case 51: case 52:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 49:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
break;
case 53:
this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
}
},
table: [{3:1,4:2,6:3,16:[1,4]},{1:[3]},{5:[1,5]},{7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6},{17:[1,22]},{1:[2,1]},{5:[2,2]},{5:[2,3],7:23,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,20:$V0,21:$V1,22:$V2,24:$V3,25:$V4,26:$V5,27:$V6},o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),{17:[1,24]},{17:[1,25]},{17:[1,26]},{17:[1,27]},{17:[1,28]},{17:[1,29]},{17:[1,30]},{18:[1,31]},{5:[2,4]},{18:[1,32]},{18:[1,33]},{23:[1,34]},{23:[1,35]},{18:[1,36]},{18:[1,37]},{18:[1,40],20:[1,41],28:38,29:39},o($V8,[2,13],{19:42,34:$V9}),o($V7,[2,15],{19:44,34:$V9}),o($V7,[2,17],{19:45,34:$V9}),{17:[1,46]},{17:[1,47]},{17:[1,48]},{17:[1,49]},o($V7,[2,27],{19:50,34:$V9}),{17:[1,51]},{32:[1,52]},{32:[1,53]},o($V8,[2,12]),{35:54,36:[1,55],37:56,38:$Va,39:$Vb,41:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($V7,[2,14]),o($V7,[2,16]),{18:[1,64]},{23:[1,65]},{18:[1,66]},{18:[1,67]},o($V7,[2,26]),{30:[1,68]},{18:[1,69]},{18:[1,70]},{36:[1,71]},o($V7,[2,34]),{17:[1,72],36:[2,35]},{17:[1,73]},{17:[1,74]},{17:[1,75]},{17:[1,76]},{17:[1,77]},{17:[1,78]},{17:[1,79]},o($V7,[2,19],{19:80,34:$V9}),{17:[1,81]},o($V7,[2,23],{19:82,34:$V9}),{17:[1,83]},o([5,20,21,22,24,25,26,27,34],[2,28]),{17:[2,31]},{33:[1,84]},o($V7,[2,33]),{35:85,37:56,38:$Va,39:$Vb,41:$Vc,43:$Vd,44:$Ve,45:$Vf,46:$Vg},o($Vh,[2,37]),{18:$Vi,40:86},{18:$Vj,23:$Vk,42:88,49:89,52:91},o($Vh,[2,40]),o($Vh,[2,41]),{18:$Vj,23:$Vk,42:93,49:89,52:91},{18:$Vl,47:94},o($V7,[2,18]),{23:[1,96]},o($V7,[2,22]),{18:[1,97]},{17:[2,32]},{36:[2,36]},o($Vh,[2,38]),o($Vh,[2,44],{48:[1,98]}),o($Vh,[2,39]),o($Vh,[2,46],{50:[1,99]}),{51:100,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr},{51:107,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr},o($Vs,[2,50],{53:108,62:[1,109],63:[1,110],64:[1,111],65:[1,112],66:[1,113]}),o($Vh,[2,42]),o($Vh,[2,43]),{54:[1,114]},{17:[1,115]},{17:[1,116]},{18:$Vi,40:117},{18:$Vj,23:$Vk,42:118,49:89,52:91},{23:$Vk,52:119},o($Vt,[2,54]),o($Vt,[2,55]),o($Vt,[2,56]),o($Vt,[2,57]),o($Vt,[2,58]),o($Vt,[2,59]),{18:[1,120]},{23:$Vk,52:121},{23:[2,60]},{23:[2,61]},{23:[2,62]},{23:[2,63]},{23:[2,64]},{23:[1,122]},{23:[1,123]},{18:[1,124]},o($Vh,[2,45]),o($Vh,[2,47]),o($Vu,[2,48]),{51:125,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr},o($Vs,[2,51]),o($Vh,[2,52],{55:[1,126]}),{17:[1,127]},o($V7,[2,25],{19:128,34:$V9}),{23:$Vk,52:129},{18:$Vl,47:130},{18:[1,131]},o($V7,[2,24]),o($Vu,[2,49]),o($Vh,[2,53]),o($V7,[2,21],{19:132,34:$V9}),o($V7,[2,20])],
defaultActions: {5:[2,1],6:[2,2],23:[2,4],69:[2,31],84:[2,32],85:[2,36],109:[2,60],110:[2,61],111:[2,62],112:[2,63],113:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: return 'TOK_EOL' 
break;
case 3: return 22 
break;
case 4: return 26 
break;
case 5: return 21 
break;
case 6: return 24 
break;
case 7: return 25 
break;
case 8: return 20 
break;
case 9: return 27 
break;
case 10: return 16 
break;
case 11: return 38 
break;
case 12: return 39 
break;
case 13: return 41 
break;
case 14: return 43 
break;
case 15: return 44 
break;
case 16: return 45 
break;
case 17: return 46 
break;
case 18: return 'TOK_IF' 
break;
case 19: return 'TOK_WHILE' 
break;
case 20: return 'TOK_NOP' 
break;
case 21: return 'TOK_LOCAL' 
break;
case 22: return 23 
break;
case 23: return 18 
break;
case 24: return 17 
break;
case 25: return 32 
break;
case 26: return 'TOK_EXMARK' 
break;
case 27: return 33 
break;
case 28: return 34 
break;
case 29: return 36 
break;
case 30: return 48 
break;
case 31: return 50 
break;
case 32: return 62 
break;
case 33: return 63 
break;
case 34: return 64 
break;
case 35: return 65 
break;
case 36: return 66 
break;
case 37: return 56 
break;
case 38: return 61 
break;
case 39: return 58 
break;
case 40: return 59 
break;
case 41: return 57 
break;
case 42: return 60 
break;
case 43: return 54 
break;
case 44: return 'TOK_LBRACKET' 
break;
case 45: return 'TOK_RBRACKET' 
break;
case 46: return 55 
break;
case 47: return 5 
break;
}
},
rules: [/^(?:\s+)/,/^(?:#[^\n]*)/,/^(?:\n)/,/^(?:clock\b)/,/^(?:edge\b)/,/^(?:event\b)/,/^(?:int\b)/,/^(?:location\b)/,/^(?:process\b)/,/^(?:sync\b)/,/^(?:system\b)/,/^(?:initial\b)/,/^(?:labels\b)/,/^(?:invariant\b)/,/^(?:committed\b)/,/^(?:urgent\b)/,/^(?:provided\b)/,/^(?:do\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:nop\b)/,/^(?:local\b)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?::)/,/^(?:@)/,/^(?:!)/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:&&)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = timedAutomata_alt;
exports.Parser = timedAutomata_alt.Parser;
exports.parse = function () { return timedAutomata_alt.parse.apply(timedAutomata_alt, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}

export default timedAutomata_alt;